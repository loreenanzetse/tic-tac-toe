{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\tic-tac-react\\\\src\\\\app.js\",\n    _s = $RefreshSig$();\n\n//Importing the required components\nimport Board from './board';\nimport Info from \"./info\"; // Importing the CSS File\n\nimport \"./css/app.css\"; // Importing the useState hook\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Creating a reset state, which indicates whether \n  // the game should be reset or not\n  const [reset, setReset] = useState(false); // Creating a winner state, which indicates\n  // the current winner\n\n  const [winner, setWinner] = useState(''); // Sets the reset property to true\n  // which starts the chain \n  // reaction of resetting the board\n\n  const resetBoard = () => {\n    setReset(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `winner ${winner !== '' ? '' : 'shrink'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winner-text\",\n        children: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => resetBoard(),\n        children: \"Reset Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      reset: reset,\n      setReset: setReset,\n      winner: winner,\n      setWinner: setWinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"mqcDVv37LYKnOfmyjlI9doxq/aw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","Info","useState","App","reset","setReset","winner","setWinner","resetBoard"],"sources":["C:/Users/USER/Desktop/tic-tac-react/src/app.js"],"sourcesContent":["//Importing the required components\r\nimport Board from './board';\r\nimport Info from \"./info\";\r\n  \r\n// Importing the CSS File\r\nimport \"./css/app.css\";\r\n  \r\n// Importing the useState hook\r\nimport { useState } from 'react';\r\n  \r\nfunction App() {\r\n  \r\n    // Creating a reset state, which indicates whether \r\n    // the game should be reset or not\r\n    const [reset, setReset] = useState(false);\r\n  \r\n    // Creating a winner state, which indicates\r\n    // the current winner\r\n    const [winner, setWinner] = useState('');\r\n  \r\n    // Sets the reset property to true\r\n    // which starts the chain \r\n    // reaction of resetting the board\r\n    const resetBoard = () => {\r\n        setReset(true);\r\n    }\r\n  \r\n    return (\r\n        <div className=\"App\">\r\n            {/* Shrinks the popup when there is no winner */}\r\n            <div className={`winner ${winner !== '' ? '' : 'shrink'}`}>\r\n                {/* Display the current winner */}\r\n                <div className='winner-text'>{winner}</div>\r\n                {/* Button used to reset the board */}\r\n                <button onClick={() => resetBoard()}>\r\n                    Reset Board\r\n                </button>\r\n            </div>\r\n            {/* Custom made board component comprising of \r\n            the tic-tac-toe board  */}\r\n            <Board reset={reset} setReset={setReset} winner={winner} \r\n                setWinner={setWinner} />\r\n            <Info />\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default App;"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,OAAO,eAAP,C,CAEA;;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAEX;EACA;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,KAAD,CAAlC,CAJW,CAMX;EACA;;EACA,MAAM,CAACI,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC,CARW,CAUX;EACA;EACA;;EACA,MAAMM,UAAU,GAAG,MAAM;IACrBH,QAAQ,CAAC,IAAD,CAAR;EACH,CAFD;;EAIA,oBACI;IAAK,SAAS,EAAC,KAAf;IAAA,wBAEI;MAAK,SAAS,EAAG,UAASC,MAAM,KAAK,EAAX,GAAgB,EAAhB,GAAqB,QAAS,EAAxD;MAAA,wBAEI;QAAK,SAAS,EAAC,aAAf;QAAA,UAA8BA;MAA9B;QAAA;QAAA;QAAA;MAAA,QAFJ,eAII;QAAQ,OAAO,EAAE,MAAME,UAAU,EAAjC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAYI,QAAC,KAAD;MAAO,KAAK,EAAEJ,KAAd;MAAqB,QAAQ,EAAEC,QAA/B;MAAyC,MAAM,EAAEC,MAAjD;MACI,SAAS,EAAEC;IADf;MAAA;MAAA;MAAA;IAAA,QAZJ,eAcI,QAAC,IAAD;MAAA;MAAA;MAAA;IAAA,QAdJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkBH;;GAnCQJ,G;;KAAAA,G;AAqCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}