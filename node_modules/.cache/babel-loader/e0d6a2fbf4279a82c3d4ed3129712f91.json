{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\tic-tac-react\\\\src\\\\board.js\",\n    _s = $RefreshSig$();\n\n// Importing the CSS for the board\nimport \"./css/board.css\"; // Importing the useState hook, useEffect hook and useRef hook\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = _ref => {\n  _s();\n\n  let {\n    reset,\n    setReset,\n    winner,\n    setWinner\n  } = _ref;\n  // Creating a turn state, which indicates the current turn\n  const [turn, setTurn] = useState(0); // Creating a data state, which contains the \n  // current picture of the board\n\n  const [data, setData] = useState(['', '', '', '', '', '', '', '', '']); // Creating a reference for the board\n\n  const boardRef = useRef(null); // Function to draw on the board\n\n  const draw = (event, index) => {\n    // Draws only if the position is not taken \n    // and winner is not decided yet\n    if (data[index - 1] === '' && winner === '') {\n      // Draws X if it's player 1's turn else draws O\n      const current = turn === 0 ? \"X\" : \"O\"; // Updating the data state\n\n      data[index - 1] = current; //Drawing on the board\n\n      event.target.innerText = current; // Switching the turn\n\n      setTurn(turn === 0 ? 1 : 0);\n    }\n  }; // UseEffect hook used to reset the board whenever \n  // a winner is decided\n\n\n  useEffect(() => {\n    // Clearing the data state\n    setData(['', '', '', '', '', '', '', '', '']); // Getting all the children(cells) of the board\n\n    const cells = boardRef.current.children; // Clearing out the board\n\n    for (let i = 0; i < 9; i++) {\n      cells[i].innerText = '';\n    } // Resetting the turn to player 0\n\n\n    setTurn(0); // Resetting the winner\n\n    setWinner('');\n    setReset(false);\n  }, [reset, setReset, setWinner]); // useEffect hook used to check for a winner\n\n  useEffect(() => {\n    // Checks for the win condition in rows\n    const checkRow = () => {\n      let ans = false;\n\n      for (let i = 0; i < 9; i += 3) {\n        ans |= data[i] === data[i + 1] && data[i] === data[i + 2] && data[i] !== '';\n      }\n\n      return ans;\n    }; // Checks for the win condition in cols\n\n\n    const checkCol = () => {\n      let ans = false;\n\n      for (let i = 0; i < 3; i++) {\n        ans |= data[i] === data[i + 3] && data[i] === data[i + 6] && data[i] !== '';\n      }\n\n      return ans;\n    }; // Checks for the win condition in diagonals\n\n\n    const checkDiagonal = () => {\n      return data[0] === data[4] && data[0] === data[8] && data[0] !== '' || data[2] === data[4] && data[2] === data[6] && data[2] !== '';\n    }; // Checks if at all a win condition is present\n\n\n    const checkWin = () => {\n      return checkRow() || checkCol() || checkDiagonal();\n    }; // Checks for a tie\n\n\n    const checkTie = () => {\n      let count = 0;\n      data.forEach(cell => {\n        if (cell !== '') {\n          count++;\n        }\n      });\n      return count === 9;\n    }; // Setting the winner in case of a win\n\n\n    if (checkWin()) {\n      setWinner(turn === 0 ? \"Player 2 Wins!\" : \"Player 1 Wins!\");\n    } else if (checkTie()) {\n      // Setting the winner to tie in case of a tie\n      setWinner(\"It's a Tie!\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: boardRef,\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-1\",\n      onClick: e => draw(e, 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-2\",\n      onClick: e => draw(e, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-3\",\n      onClick: e => draw(e, 3)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-4\",\n      onClick: e => draw(e, 4)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-5\",\n      onClick: e => draw(e, 5)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-6\",\n      onClick: e => draw(e, 6)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-7\",\n      onClick: e => draw(e, 7)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-8\",\n      onClick: e => draw(e, 8)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input input-9\",\n      onClick: e => draw(e, 9)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"n4pqI6KW/dKWXGwdSP5bSfb744I=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","useRef","Board","reset","setReset","winner","setWinner","turn","setTurn","data","setData","boardRef","draw","event","index","current","target","innerText","cells","children","i","checkRow","ans","checkCol","checkDiagonal","checkWin","checkTie","count","forEach","cell","e"],"sources":["C:/Users/USER/Desktop/tic-tac-react/src/board.js"],"sourcesContent":["// Importing the CSS for the board\r\nimport \"./css/board.css\";\r\n  \r\n// Importing the useState hook, useEffect hook and useRef hook\r\nimport { useState, useEffect, useRef } from \"react\";\r\n  \r\nconst Board = ({ reset, setReset, winner, setWinner }) => {\r\n  \r\n    // Creating a turn state, which indicates the current turn\r\n    const [turn, setTurn] = useState(0);\r\n  \r\n    // Creating a data state, which contains the \r\n    // current picture of the board\r\n    const [data, setData] = useState(['', '', '', '', '', \r\n        '', '', '', ''])\r\n  \r\n    // Creating a reference for the board\r\n    const boardRef = useRef(null);\r\n  \r\n    // Function to draw on the board\r\n    const draw = (event, index) => {\r\n        // Draws only if the position is not taken \r\n        // and winner is not decided yet\r\n        if (data[index - 1] === '' && winner === '') {\r\n  \r\n            // Draws X if it's player 1's turn else draws O\r\n            const current = turn === 0 ? \"X\" : \"O\"\r\n  \r\n            // Updating the data state\r\n            data[index - 1] = current;\r\n  \r\n            //Drawing on the board\r\n            event.target.innerText = current;\r\n  \r\n            // Switching the turn\r\n            setTurn(turn === 0 ? 1 : 0)\r\n        }\r\n    }\r\n  \r\n    // UseEffect hook used to reset the board whenever \r\n    // a winner is decided\r\n    useEffect(() => {\r\n  \r\n        // Clearing the data state\r\n        setData(['', '', '', '', '', '', '', '', '']);\r\n  \r\n        // Getting all the children(cells) of the board\r\n        const cells = boardRef.current.children\r\n  \r\n        // Clearing out the board\r\n        for (let i = 0; i < 9; i++) {\r\n            cells[i].innerText = '';\r\n        }\r\n  \r\n        // Resetting the turn to player 0\r\n        setTurn(0);\r\n  \r\n        // Resetting the winner\r\n        setWinner('');\r\n        setReset(false);\r\n    }, [reset, setReset, setWinner])\r\n  \r\n  \r\n    // useEffect hook used to check for a winner\r\n    useEffect(() => {\r\n  \r\n        // Checks for the win condition in rows\r\n        const checkRow = () => {\r\n            let ans = false;\r\n            for (let i = 0; i < 9; i += 3) {\r\n                ans |= (data[i] === data[i + 1] && \r\n                data[i] === data[i + 2] && \r\n                data[i] !== '')\r\n            }\r\n            return ans;\r\n        }\r\n  \r\n        // Checks for the win condition in cols\r\n        const checkCol = () => {\r\n            let ans = false;\r\n            for (let i = 0; i < 3; i++) {\r\n                ans |= (data[i] === data[i + 3] && \r\n                data[i] === data[i + 6] && \r\n                data[i] !== '')\r\n            }\r\n            return ans;\r\n        }\r\n  \r\n        // Checks for the win condition in diagonals\r\n        const checkDiagonal = () => {\r\n            return ((data[0] === data[4] && \r\n            data[0] === data[8] && data[0] !== '') || \r\n            (data[2] === data[4] && data[2] === data[6] && \r\n            data[2] !== ''));\r\n        }\r\n  \r\n        // Checks if at all a win condition is present\r\n        const checkWin = () => {\r\n            return (checkRow() || checkCol() || checkDiagonal());\r\n        }\r\n  \r\n        // Checks for a tie\r\n        const checkTie = () => {\r\n            let count = 0;\r\n            data.forEach((cell) => {\r\n                if (cell !== '') {\r\n                    count++;\r\n                }\r\n            })\r\n            return count === 9;\r\n        }\r\n  \r\n        // Setting the winner in case of a win\r\n        if (checkWin()) {\r\n            setWinner(turn === 0 ? \"Player 2 Wins!\" : \r\n            \"Player 1 Wins!\");\r\n        } else if (checkTie()) {\r\n  \r\n            // Setting the winner to tie in case of a tie\r\n            setWinner(\"It's a Tie!\");\r\n        }\r\n  \r\n    })\r\n  \r\n    return (\r\n        <div ref={boardRef} className=\"board\">\r\n            <div className=\"input input-1\" \r\n                onClick={(e) => draw(e, 1)}></div>\r\n            <div className=\"input input-2\" \r\n                onClick={(e) => draw(e, 2)}></div>\r\n            <div className=\"input input-3\" \r\n                onClick={(e) => draw(e, 3)}></div>\r\n            <div className=\"input input-4\" \r\n                onClick={(e) => draw(e, 4)}></div>\r\n            <div className=\"input input-5\" \r\n                onClick={(e) => draw(e, 5)}></div>\r\n            <div className=\"input input-6\" \r\n                onClick={(e) => draw(e, 6)}></div>\r\n            <div className=\"input input-7\" \r\n                onClick={(e) => draw(e, 7)}></div>\r\n            <div className=\"input input-8\" \r\n                onClick={(e) => draw(e, 8)}></div>\r\n            <div className=\"input input-9\" \r\n                onClick={(e) => draw(e, 9)}></div>\r\n        </div>\r\n    )\r\n}\r\n  \r\nexport default Board;\r\n"],"mappings":";;;AAAA;AACA,OAAO,iBAAP,C,CAEA;;AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;;AAEA,MAAMC,KAAK,GAAG,QAA4C;EAAA;;EAAA,IAA3C;IAAEC,KAAF;IAASC,QAAT;IAAmBC,MAAnB;IAA2BC;EAA3B,CAA2C;EAEtD;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,CAAD,CAAhC,CAHsD,CAKtD;EACA;;EACA,MAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAC7B,EAD6B,EACzB,EADyB,EACrB,EADqB,EACjB,EADiB,CAAD,CAAhC,CAPsD,CAUtD;;EACA,MAAMY,QAAQ,GAAGV,MAAM,CAAC,IAAD,CAAvB,CAXsD,CAatD;;EACA,MAAMW,IAAI,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;IAC3B;IACA;IACA,IAAIL,IAAI,CAACK,KAAK,GAAG,CAAT,CAAJ,KAAoB,EAApB,IAA0BT,MAAM,KAAK,EAAzC,EAA6C;MAEzC;MACA,MAAMU,OAAO,GAAGR,IAAI,KAAK,CAAT,GAAa,GAAb,GAAmB,GAAnC,CAHyC,CAKzC;;MACAE,IAAI,CAACK,KAAK,GAAG,CAAT,CAAJ,GAAkBC,OAAlB,CANyC,CAQzC;;MACAF,KAAK,CAACG,MAAN,CAAaC,SAAb,GAAyBF,OAAzB,CATyC,CAWzC;;MACAP,OAAO,CAACD,IAAI,KAAK,CAAT,GAAa,CAAb,GAAiB,CAAlB,CAAP;IACH;EACJ,CAjBD,CAdsD,CAiCtD;EACA;;;EACAP,SAAS,CAAC,MAAM;IAEZ;IACAU,OAAO,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,CAAD,CAAP,CAHY,CAKZ;;IACA,MAAMQ,KAAK,GAAGP,QAAQ,CAACI,OAAT,CAAiBI,QAA/B,CANY,CAQZ;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MACxBF,KAAK,CAACE,CAAD,CAAL,CAASH,SAAT,GAAqB,EAArB;IACH,CAXW,CAaZ;;;IACAT,OAAO,CAAC,CAAD,CAAP,CAdY,CAgBZ;;IACAF,SAAS,CAAC,EAAD,CAAT;IACAF,QAAQ,CAAC,KAAD,CAAR;EACH,CAnBQ,EAmBN,CAACD,KAAD,EAAQC,QAAR,EAAkBE,SAAlB,CAnBM,CAAT,CAnCsD,CAyDtD;;EACAN,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMqB,QAAQ,GAAG,MAAM;MACnB,IAAIC,GAAG,GAAG,KAAV;;MACA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;QAC3BE,GAAG,IAAKb,IAAI,CAACW,CAAD,CAAJ,KAAYX,IAAI,CAACW,CAAC,GAAG,CAAL,CAAhB,IACRX,IAAI,CAACW,CAAD,CAAJ,KAAYX,IAAI,CAACW,CAAC,GAAG,CAAL,CADR,IAERX,IAAI,CAACW,CAAD,CAAJ,KAAY,EAFZ;MAGH;;MACD,OAAOE,GAAP;IACH,CARD,CAHY,CAaZ;;;IACA,MAAMC,QAAQ,GAAG,MAAM;MACnB,IAAID,GAAG,GAAG,KAAV;;MACA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;QACxBE,GAAG,IAAKb,IAAI,CAACW,CAAD,CAAJ,KAAYX,IAAI,CAACW,CAAC,GAAG,CAAL,CAAhB,IACRX,IAAI,CAACW,CAAD,CAAJ,KAAYX,IAAI,CAACW,CAAC,GAAG,CAAL,CADR,IAERX,IAAI,CAACW,CAAD,CAAJ,KAAY,EAFZ;MAGH;;MACD,OAAOE,GAAP;IACH,CARD,CAdY,CAwBZ;;;IACA,MAAME,aAAa,GAAG,MAAM;MACxB,OAASf,IAAI,CAAC,CAAD,CAAJ,KAAYA,IAAI,CAAC,CAAD,CAAhB,IACTA,IAAI,CAAC,CAAD,CAAJ,KAAYA,IAAI,CAAC,CAAD,CADP,IACcA,IAAI,CAAC,CAAD,CAAJ,KAAY,EAD3B,IAEPA,IAAI,CAAC,CAAD,CAAJ,KAAYA,IAAI,CAAC,CAAD,CAAhB,IAAuBA,IAAI,CAAC,CAAD,CAAJ,KAAYA,IAAI,CAAC,CAAD,CAAvC,IACDA,IAAI,CAAC,CAAD,CAAJ,KAAY,EAHZ;IAIH,CALD,CAzBY,CAgCZ;;;IACA,MAAMgB,QAAQ,GAAG,MAAM;MACnB,OAAQJ,QAAQ,MAAME,QAAQ,EAAtB,IAA4BC,aAAa,EAAjD;IACH,CAFD,CAjCY,CAqCZ;;;IACA,MAAME,QAAQ,GAAG,MAAM;MACnB,IAAIC,KAAK,GAAG,CAAZ;MACAlB,IAAI,CAACmB,OAAL,CAAcC,IAAD,IAAU;QACnB,IAAIA,IAAI,KAAK,EAAb,EAAiB;UACbF,KAAK;QACR;MACJ,CAJD;MAKA,OAAOA,KAAK,KAAK,CAAjB;IACH,CARD,CAtCY,CAgDZ;;;IACA,IAAIF,QAAQ,EAAZ,EAAgB;MACZnB,SAAS,CAACC,IAAI,KAAK,CAAT,GAAa,gBAAb,GACV,gBADS,CAAT;IAEH,CAHD,MAGO,IAAImB,QAAQ,EAAZ,EAAgB;MAEnB;MACApB,SAAS,CAAC,aAAD,CAAT;IACH;EAEJ,CA1DQ,CAAT;EA4DA,oBACI;IAAK,GAAG,EAAEK,QAAV;IAAoB,SAAS,EAAC,OAA9B;IAAA,wBACI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGmB,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QADJ,eAGI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QAHJ,eAKI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QALJ,eAOI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QAPJ,eASI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QATJ,eAWI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QAXJ,eAaI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QAbJ,eAeI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QAfJ,eAiBI;MAAK,SAAS,EAAC,eAAf;MACI,OAAO,EAAGA,CAAD,IAAOlB,IAAI,CAACkB,CAAD,EAAI,CAAJ;IADxB;MAAA;MAAA;MAAA;IAAA,QAjBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAsBH,CA5ID;;GAAM5B,K;;KAAAA,K;AA8IN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}